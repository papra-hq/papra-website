---
import { config } from '../../app.config';
import FaqAccordion from '../../components/FaqAccordion.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import LaunchBanner from '../../components/LaunchBanner.astro';
import { useI18n } from '../../i18n/i18n';
import { LOCALES } from '../../i18n/i18n.constants';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
    return LOCALES.map(locale => ({ params: { locale } }));
}

const { t } = useI18n({ locale: Astro.currentLocale });
const discount = config.launchDiscount;

type Plan = {
  name: string;
  monthlyPrice: number;
  annualPrice: number;
  features: readonly string[];
  cta: {
    text: string;
    url: string;
  };
  popular?: boolean;
} & (
  | {
      discountedMonthlyPrice?: undefined;
      discountedAnnualPrice?: undefined;
    }
    | {
      discountedMonthlyPrice: number;
      discountedAnnualPrice: number;
    }
);

const plans: Plan[] = [
  {
    name: t('pricing.plan.free.name'),
    monthlyPrice: 0,
    annualPrice: 0,
    features: t('pricing.plan.free.features'),
    cta: {
      text: t('pricing.get-started'),
      url: config.getStartedLink,
    },
  },
  {
    name: t('pricing.plan.plus.name'),
    monthlyPrice: 9,
    annualPrice: 90,
    features: t('pricing.plan.plus.features'),
    cta: {
      text: t('pricing.get-started'),
      url: config.getStartedLink,
    },
    popular: true,
  },

  {
    name: t('pricing.plan.pro.name'),
    monthlyPrice: 30,
    annualPrice: 300,
    features: t('pricing.plan.pro.features'),
    cta: {
      text: t('pricing.get-started'),
      url: config.getStartedLink,
    },
  },
].map((plan) => {
  if (discount.enabled && plan.monthlyPrice > 0) {
    const discountMultiplier = 1 - discount.percentage / 100;
    return {
      ...plan,
      discountedMonthlyPrice: plan.monthlyPrice * discountMultiplier,
      discountedAnnualPrice: plan.annualPrice * discountMultiplier,
    };
  }
  return plan;
});
---

<Layout>
  {discount.enabled && <LaunchBanner />}
  <div class="bg-card flex flex-col w-full min-h-screen relative">
    <Header class={discount.enabled ? 'absolute! top-0' : undefined} />

    <div class="w-full bg-[linear-gradient(to_right,#80808010_1px,transparent_1px),linear-gradient(to_bottom,#80808010_1px,transparent_1px)] bg-[size:48px_48px] bg-background border-b pt-32 pb-24">
      <div class="max-w-700px mx-auto p-4 text-center">
        <h1 class="text-3xl md:text-4xl mb-4 font-bold">{t('pricing.title')}</h1>
        <p class="text-base md:text-lg text-muted-foreground leading-tight">{t('pricing.subtitle')}</p>
      </div>
    </div>

    <div class="max-w-1200px mx-auto px-6 md:px-8 flex-1 w-full">
      <div class="flex flex-col items-center justify-center my-12 gap-3">
        <div class="inline-flex rounded-lg border border-border bg-muted p-1" role="group">
          <button id="monthly-btn" type="button" class="px-4 py-2 text-sm font-medium rounded-md transition-colors">{t('pricing.toggle.monthly')}</button>
          <button id="annual-btn" type="button" class="px-4 py-2 text-sm font-medium rounded-md transition-colors bg-background text-foreground shadow-sm flex items-center">
            {t('pricing.toggle.annual')}
          </button>
        </div>
        <p class="text-sm text-muted-foreground text-center">
          {t('pricing.currency-note')}
        </p>
      </div>

      {discount.enabled && (
     <div class="mb-8 bg-gradient-to-r from-primary/20 to-primary/2 border border-primary/30 rounded-lg p-4 flex-shrink-0">
            <div class="flex items-center gap-4">
              <div class="p-2.5 bg-primary/20 rounded-lg border border-primary/30 flex-shrink-0">
                <div class="i-tabler-gift size-6 text-primary"></div>
              </div>
              <div class="flex-1">
                <div class="flex items-center gap-2">
                  <h4 class="text-base font-semibold text-foreground">{t('pricing.discount-banner.title')}</h4>
                  <div class="px-2 py-0.5 bg-primary text-primary-foreground text-xs font-bold rounded-md">
                    {`-${discount.percentage}%`}
                  </div>
                </div>
                <p class="text-sm text-muted-foreground mb-1" set:html={t('pricing.discount-banner.description')} />
              </div>
            </div>
          </div>

      )}

      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        {
          plans.map(plan => (
            <div class={`relative border rounded-xl bg-background p-6 flex flex-col ${plan.popular ? 'border-primary' : ''}`}>
              <div class="flex gap-2 absolute top--3 right-6">
                {discount.enabled && plan.discountedMonthlyPrice !== undefined && (
                  <div class="bg-primary text-primary-foreground text-xs font-bold px-3 py-1 rounded-full">
                    {discount.percentage}% OFF
                  </div>
                )}
                {plan.popular && <div class="bg-primary text-primary-foreground text-xs font-bold px-3 py-1 rounded-full">{t('pricing.most-popular')}</div>}
              </div>

              <h2 class="text-2xl font-bold mb-2">{plan.name}</h2>

              <div class="mb-6 border-b pb-6">
                <div>
                  {plan.discountedMonthlyPrice !== undefined
? (
                    <div class="flex gap-1 flex-wrap items-end">
                      <div class="flex flex-col items-start gap-1">
                        <span class="monthly-price text-2xl font-medium text-muted-foreground hidden lh-none relative after:(content-[''] absolute left--5px right--5px top-1/2 h-2px bg-muted-foreground/40 rounded-full -rotate-12 origin-center)">${plan.monthlyPrice}</span>
                        <span class="monthly-price text-5xl font-semibold hidden lh-none text-primary">${plan.discountedMonthlyPrice}</span>
                      </div>
                      {plan.annualPrice > 0
? (
                        <div class="flex flex-col items-start gap-1">
                          <span class="annual-price text-2xl text-muted-foreground lh-none relative after:(content-[''] absolute left--5px right--5px top-1/2 h-2px bg-muted-foreground/40 rounded-full -rotate-12 origin-center)">${Math.round((100 * plan.annualPrice) / 12) / 100}</span>
                          <span class="annual-price text-5xl font-semibold lh-none text-primary">${Math.round((100 * plan.discountedAnnualPrice) / 12) / 100}</span>
                        </div>
                      )
: (
                        <span class="annual-price text-5xl font-semibold">$0</span>
                      )}
                      <div>
                        <span class="text-muted-foreground">{t('pricing.per-month')}</span>
                        {plan.annualPrice > 0 && <div class="text-xs text-muted-foreground annual-price">{t('pricing.billed-annually', { price: `$${plan.discountedAnnualPrice}` })}</div>}
                      </div>
                    </div>
                  )
: (
                    <div class="flex gap-1 flex-wrap items-end">
                      <span class="monthly-price text-5xl font-semibold hidden lh-none">${plan.monthlyPrice}</span>
                      {plan.annualPrice > 0
? (
                        <span class="annual-price text-5xl font-semibold lh-none">${Math.round((100 * plan.annualPrice) / 12) / 100}</span>
                      )
: (
                        <span class="annual-price text-5xl font-semibold">$0</span>
                      )}
                      <div>
                        <span class="text-muted-foreground">{t('pricing.per-month')}</span>
                        {plan.annualPrice > 0 && <div class="text-xs text-muted-foreground annual-price">{t('pricing.billed-annually', { price: `$${plan.annualPrice}` })}</div>}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <ul class="space-y-3 mb-8 flex-1">
                {plan.features.map(feature => (
                  <li class="flex items-start gap-2">
                    <div class="rounded-lg bg-muted p-0.75">
                      <div class="i-tabler-check size-4 text-primary flex-shrink-0" />
                    </div>
                    <span class="text-sm">{feature}</span>
                  </li>
                ))}
              </ul>

              <a
                href={plan.cta.url}
                class={`text-center font-semibold px-4 py-2.5 rounded-lg transition ${
                  plan.popular ? 'bg-primary text-primary-foreground hover:bg-primary/80' : 'border border-border hover:border-primary hover:text-primary'
                }`}
              >
                {plan.cta.text}
              </a>
            </div>
          ))
        }
      </div>

      <div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="border rounded-xl bg-background p-6 flex-col items-start">
          <h2 class="text-2xl font-bold">{t('pricing.enterprise.title')}</h2>
          <p class="text-muted-foreground mt-2 mb-4 flex-1" set:html={t('pricing.enterprise.description')} />
          <a href="/contact" class="inline-flex items-center gap-2 border font-semibold px-4 py-2 rounded-lg hover:border-primary hover:text-primary transition">
            {t('pricing.contact-us')}
            <div class="i-tabler-arrow-right size-5"></div>
          </a>
        </div>

        <div class="border rounded-xl bg-background p-6 flex flex-col items-start">
          <h2 class="text-2xl font-bold">{t('pricing.self-hosting.title')}</h2>
          <p class="text-muted-foreground mt-2 mb-4 flex-1" set:html={t('pricing.self-hosting.description')} />
          <a
            href="https://docs.papra.app/self-hosting/using-docker/"
            target="_blank"
            rel="noopener"
            class="inline-flex items-center gap-2 border font-semibold px-4 py-2 rounded-lg hover:border-primary hover:text-primary transition"
          >
            {t('pricing.self-hosting.cta')}
            <div class="i-tabler-arrow-right size-5"></div>
          </a>
        </div>
      </div>
    </div>

    <FaqAccordion
      title={t('pricing.faq.title')}
      description={t('pricing.faq.subtitle')}
      items={t('pricing.faq.questions')}
    />

    <div class="bg-card pb-32">
      <div class="max-w-1200px mx-auto px-6">
        <div
          class="border rounded-xl bg-background pt-32 pb-24 bg-[linear-gradient(to_right,#80808010_1px,transparent_1px),linear-gradient(to_bottom,#80808010_1px,transparent_1px)] bg-[size:48px_48px] px-6"
        >
          <h2 class="text-2xl sm:text-4xl font-bold text-center max-w-650px mx-auto">{t('pricing.final-cta.title')}</h2>

          <div class="flex mt-4 items-center justify-center">
            <a href={config.getStartedLink} class="font-semibold text-background px-4 py-2 hover:bg-primary/80 rounded-lg bg-primary transition mt-8 inline-block flex items-center">
              {t('pricing.final-cta.button')}

              <div class="i-tabler-arrow-right ml-2 size-5" aria-hidden="true"></div>
            </a>
          </div>
        </div>
      </div>
    </div>

    <Footer />
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const monthlyBtn = document.getElementById('monthly-btn');
    const annualBtn = document.getElementById('annual-btn');
    const monthlyPrices = document.querySelectorAll('.monthly-price');
    const annualPrices = document.querySelectorAll('.annual-price');
    const monthlyPromoPrices = document.querySelectorAll('.monthly-promo-price');
    const annualPromoPrices = document.querySelectorAll('.annual-promo-price');

    const activeClasses = ['bg-background', 'text-foreground', 'shadow-sm'];
    const inactiveClasses = ['bg-transparent', 'text-muted-foreground'];

    function setAnnual() {
      // Update button styles
      annualBtn?.classList.add(...activeClasses);
      annualBtn?.classList.remove(...inactiveClasses);
      monthlyBtn?.classList.remove(...activeClasses);
      monthlyBtn?.classList.add(...inactiveClasses);

      // Toggle price visibility
      monthlyPrices.forEach(el => el.classList.add('hidden'));
      annualPrices.forEach(el => el.classList.remove('hidden'));
      monthlyPromoPrices.forEach(el => el.classList.add('hidden'));
      annualPromoPrices.forEach(el => el.classList.remove('hidden'));
    }

    function setMonthly() {
      // Update button styles
      monthlyBtn?.classList.add(...activeClasses);
      monthlyBtn?.classList.remove(...inactiveClasses);
      annualBtn?.classList.remove(...activeClasses);
      annualBtn?.classList.add(...inactiveClasses);

      // Toggle price visibility
      monthlyPrices.forEach(el => el.classList.remove('hidden'));
      annualPrices.forEach(el => el.classList.add('hidden'));
      monthlyPromoPrices.forEach(el => el.classList.remove('hidden'));
      annualPromoPrices.forEach(el => el.classList.add('hidden'));
    }

    monthlyBtn?.addEventListener('click', setMonthly);
    annualBtn?.addEventListener('click', setAnnual);

    // Start with annual selected
    setAnnual();
  });
</script>
